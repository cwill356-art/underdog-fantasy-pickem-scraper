name: Esports-only props
on:
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install pandas requests

      - name: Run base scraper (writes underdog_props.csv)
        run: |
          python - << 'PY'
          from underdog_scraper import UnderdogScraper
          UnderdogScraper().scrape()
          PY

      - name: Filter to esports (LOL + CS2)
        run: |
          python - << 'PY'
          import re, json
          import pandas as pd

          df = pd.read_csv("underdog_props.csv")

          def first_col_like(cols, names):
            cols = list(cols)
            for want in names:
              for c in cols:
                cl = c.lower()
                if cl == want or want in cl:
                  return c
            return None

          COL_FULL = first_col_like(df.columns, ["full_name","player","name"])
          COL_STAT = first_col_like(df.columns, ["stat_name","market","category","stat"])
          COL_LINE = first_col_like(df.columns, ["stat_value","line","value"])
          COL_SIDE = first_col_like(df.columns, ["choice","side"])
          COL_AMER = first_col_like(df.columns, ["american_price","americanodds","american_odds"])
          COL_DEC  = first_col_like(df.columns, ["decimal_price","decimalodds","decimal_odds"])
          COL_PAY  = first_col_like(df.columns, ["payout_multiplier","payout"])
          COL_HDR  = first_col_like(df.columns, ["selection_header","matchup","player_header","title"])
          COL_SUB  = first_col_like(df.columns, ["selection_subheader","league","subtitle","game"])
          COL_SID  = first_col_like(df.columns, ["sport_id","sportkey"])
          COL_SNM  = first_col_like(df.columns, ["sport_name","sport"])
          COL_UPD  = first_col_like(df.columns, ["updated_at","last_updated","modified_at","scraped_at"])

          ESPORT_ID_VALUES = {"LOL","LEAGUEOFLEGENDS","LEAGUE_OF_LEGENDS","CS","CSGO","CS2","COUNTER_STRIKE"}
          ESPORT_NAME_KEYS = ["lol","league of legends","league-of-legends","cs2","csgo","cs:go","counter-strike","counter strike"]

          LOL_KEYS = ["kills","assists","deaths","cs","creep score","kills_on_maps","kills_on_maps_1_2","kills_on_maps_1_2_3","assists_on_maps","deaths_on_maps"]
          CS_KEYS  = ["kills","headshots","hs","adr","kpr","deaths","kills_on_maps","kills_on_maps_1_2","kills_on_maps_1_2_3"]

          def is_esport_row(row):
            if COL_SID and pd.notna(row.get(COL_SID, None)):
              if str(row[COL_SID]).strip().upper() in ESPORT_ID_VALUES:
                return True
            if COL_SNM and pd.notna(row.get(COL_SNM, None)):
              sn = str(row[COL_SNM]).lower()
              if any(k in sn for k in ESPORT_NAME_KEYS):
                return True
            hay = " ".join([str(row.get(COL_HDR,"")).lower(), str(row.get(COL_SUB,"")).lower(), str(row.get(COL_STAT,"")).lower()])
            return any(k in hay for k in ESPORT_NAME_KEYS)

          def infer_title(row):
            if COL_SNM and pd.notna(row.get(COL_SNM, None)):
              s = str(row[COL_SNM]).lower()
              if "lol" in s or "league" in s: return "LOL"
              if "cs" in s or "counter" in s: return "CS"
            hay = " ".join([str(row.get(COL_HDR,"")).lower(), str(row.get(COL_SUB,"")).lower(), str(row.get(COL_STAT,"")).lower()])
            if "lol" in hay or "league of legends" in hay: return "LOL"
            if any(k in hay for k in ["cs2","csgo","cs:go","counter"]): return "CS"
            return ""

          def market_ok(row):
            stat = str(row.get(COL_STAT,"")).lower()
            t = infer_title(row)
            keys = LOL_KEYS if t=="LOL" else CS_KEYS if t=="CS" else []
            return any(k in stat for k in keys)

          def norm_player(row):
            name = str(row.get(COL_FULL,"")).strip() if COL_FULL else ""
            if name and name.lower()!="nan":
              return name
            return str(row.get(COL_HDR,"")).strip() if COL_HDR else ""

          if len(df)==0:
            out = df.iloc[0:0].copy()
          else:
            mask = df.apply(is_esport_row, axis=1)
            es = df[mask].copy()
            out = es[es.apply(market_ok, axis=1)].copy()

          if out.empty:
            out = pd.DataFrame(columns=[
              "player","sport_name","sport_id","market","line","side",
              "american_price","decimal_price","payout_multiplier",
              "selection_header","selection_subheader","updated_at"
            ])
          else:
            out["player"] = out.apply(norm_player, axis=1)
            out = out.assign(
              sport_name = out[COL_SNM] if COL_SNM in out.columns else "",
              sport_id   = out[COL_SID] if COL_SID in out.columns else "",
              market     = out[COL_STAT] if COL_STAT in out.columns else "",
              line       = out[COL_LINE] if COL_LINE in out.columns else "",
              side       = out[COL_SIDE] if COL_SIDE in out.columns else "",
              american_price = out[COL_AMER] if COL_AMER in out.columns else "",
              decimal_price  = out[COL_DEC] if COL_DEC in out.columns else "",
              payout_multiplier = out[COL_PAY] if COL_PAY in out.columns else "",
              selection_header  = out[COL_HDR] if COL_HDR in out.columns else "",
              selection_subheader = out[COL_SUB] if COL_SUB in out.columns else "",
              updated_at = out[COL_UPD] if COL_UPD in out.columns else ""
            )[[
              "player","sport_name","sport_id","market","line","side",
              "american_price","decimal_price","payout_multiplier",
              "selection_header","selection_subheader","updated_at"
            ]]

          out.to_csv("underdog_props_esports.csv", index=False)
          print(json.dumps(out.head(50).to_dict(orient="records"), ensure_ascii=False, indent=2))
          print("ROWS:", len(out))
          PY

      - name: Upload esports-only CSV
        uses: actions/upload-artifact@v4
        with:
          name: underdog_props_esports
          path: underdog_props_esports.csv
