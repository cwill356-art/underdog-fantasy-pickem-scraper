name: HLTV ingest + projections
on:
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm i hltv p-limit papaparse

      - name: Fetch HLTV data (gentle, players in today’s matches only)
        run: |
          node - <<'JS'
          const { HLTV } = require('hltv');
          const fs = require('fs');
          const Papa = require('papaparse');
          const pLimit = require('p-limit');
          const limit = pLimit(1);

          const today = new Date();
          const RANGE_DAYS = 60;
          const since = new Date(today.getTime() - RANGE_DAYS*24*3600*1000);
          const fmt = d => d.toISOString().slice(0,10);

          const writeCSV = (rows, path) => {
            const csv = Papa.unparse(rows, { quotes: true });
            fs.writeFileSync(path, csv);
          };

          (async () => {
            // 1) Today’s matches
            const matchesAll = await HLTV.getMatches();
            const todays = matchesAll.filter(m => m.date && new Date(m.date).toDateString() === today.toDateString());
            fs.writeFileSync('hltv_matches_today.json', JSON.stringify(todays, null, 2));

            // 2) Team → players
            const teamIds = [...new Set(todays.flatMap(m => [m.team1?.id, m.team2?.id]).filter(Boolean))];
            const teamDetails = await Promise.all(teamIds.map(id => limit(() => HLTV.getTeam({ id }))));
            const playerIds = [...new Set(teamDetails.flatMap(t => t.players?.map(p => p.id)).filter(Boolean))];

            // 3) Player stats (last 60d)
            const startDate = fmt(since), endDate = fmt(today);
            const stats = [];
            for (const pid of playerIds) {
              try {
                const stat = await limit(() => HLTV.getPlayerStats({ id: pid, startDate, endDate }));
                stats.push({
                  playerId: pid,
                  nickname: stat?.player?.nickname,
                  team: stat?.team?.name,
                  maps: stat?.overview?.mapsPlayed,
                  kpr: stat?.overview?.kpr,
                  hsPct: stat?.overview?.hsPercentage,
                  adr: stat?.overview?.adr,
                  rating: stat?.overview?.rating1
                });
              } catch(e) {
                console.error('player stat fail', pid, e?.message);
              }
            }
            writeCSV(stats, 'hltv_player_form.csv');

            // 4) Conservative projections (no UD join)
            const shrink = (rate, n, base, k) => ((n*rate + k*base)/(n+k));
            const leagueKPR=0.68, leagueHS=0.46;
            const out=[];
            for(const r of stats){
              const maps=+r.maps||0;
              const kpr=+r.kpr||leagueKPR;
              const hs=+r.hsPct||leagueHS;
              const kprAdj=shrink(kpr,maps,leagueKPR,maps<25?40:25);
              const hsAdj =shrink(hs, maps,leagueHS,maps<25?60:40);
              const muKills=50*kprAdj; // balanced ~50 rounds over 2 maps
              out.push({
                player:r.nickname,
                team:r.team,
                maps,
                kprAdj:+kprAdj.toFixed(3),
                hsAdj:+hsAdj.toFixed(3),
                projKills:+muKills.toFixed(1),
                projHS:+(muKills*hsAdj).toFixed(1)
              });
            }
            writeCSV(out,'hltv_projections.csv');
            console.log(`Wrote ${out.length} rows to hltv_projections.csv`);
          })();
          JS

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hltv_edges
          path: |
            hltv_matches_today.json
            hltv_player_form.csv
            hltv_projections.csv
