name: Traditional-only props
on:
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install pandas requests

      - name: Run base scraper (writes underdog_props.csv)
        run: |
          python - << 'PY'
          # This expects your repo to have an importable `underdog_scraper.UnderdogScraper`
          # that writes a CSV named `underdog_props.csv`.
          from underdog_scraper import UnderdogScraper
          UnderdogScraper().scrape()
          PY

      - name: Filter to TRADITIONAL sports (exclude esports)
        run: |
          python - << 'PY'
          import re, json
          import pandas as pd

          df = pd.read_csv("underdog_props.csv")

          # ---------------- column helpers ----------------
          def first_col_like(cols, names):
            cols = list(cols)
            for want in names:
              for c in cols:
                cl = c.lower()
                if cl == want or want in cl:
                  return c
            return None

          COL_FULL = first_col_like(df.columns, ["full_name","player","name"])
          COL_STAT = first_col_like(df.columns, ["stat_name","market","category","stat"])
          COL_LINE = first_col_like(df.columns, ["stat_value","line","value"])
          COL_SIDE = first_col_like(df.columns, ["choice","side"])
          COL_AMER = first_col_like(df.columns, ["american_price","americanodds","american_odds"])
          COL_DEC  = first_col_like(df.columns, ["decimal_price","decimalodds","decimal_odds"])
          COL_PAY  = first_col_like(df.columns, ["payout_multiplier","payout"])
          COL_HDR  = first_col_like(df.columns, ["selection_header","matchup","player_header","title"])
          COL_SUB  = first_col_like(df.columns, ["selection_subheader","league","subtitle","game","display"])
          COL_SID  = first_col_like(df.columns, ["sport_id","sportkey"])
          COL_SNM  = first_col_like(df.columns, ["sport_name","sport"])
          COL_UPD  = first_col_like(df.columns, ["updated_at","last_updated","modified_at","scraped_at"])

          # ---------------- sport detection ----------------
          # Anything that looks like esports we EXCLUDE
          ESPORT_ID = {
            "LOL","LEAGUEOFLEGENDS","LEAGUE_OF_LEGENDS",
            "CS","CSGO","CS2","COUNTER_STRIKE","DOTA2","VALORANT","OVERWATCH"
          }
          ESPORT_KEYS = [
            "lol","league of legends","league-of-legends","cs2","csgo","cs:go",
            "counter-strike","counter strike","valorant","dota","overwatch","esports","e-sports"
          ]

          # Traditional sports we want to KEEP (id or name contains any of these)
          TRAD_ID = {
            "NFL","NCAAF","NCAAFB","CFB","NCAAB","CBB","NBA","WNBA","NHL","MLB",
            "SOCCER","MLS","EPL","UEFA","UCL","UEL","LALIGA","BUNDESLIGA","SERIEA","LIGUE1",
            "TENNIS","ATP","WTA","GOLF","PGA","LPGA",
            "MMA","UFC","BOXING","NASCAR","F1","FORMULA1","MOTOGP"
          }
          TRAD_KEYS = [
            # football
            "nfl","ncaaf","college football","cfb",
            # basketball
            "nba","wnba","ncaab","college basketball","cbb",
            # baseball
            "mlb","baseball",
            # hockey
            "nhl","hockey",
            # soccer
            "soccer","mls","premier league","epl","bundesliga","la liga","serie a","ligue 1","uefa","ucl","uel",
            # tennis / golf
            "tennis","atp","wta","golf","pga","lpga",
            # combat
            "mma","ufc","boxing",
            # motorsport
            "nascar","f1","formula 1","formula-1","motogp"
          ]

          # Market keywords to KEEP (broad common props across sports)
          KEEP_MARKETS = [
            # NFL / NCAAF
            "passing yards","pass yards","attempts","completions","interceptions","rushing yards","rush yards",
            "rushing attempts","receiving yards","receptions","longest reception","longest rush","tds","touchdowns",
            "fantasy points","fg made","field goals made",
            # NBA / WNBA / NCAAB
            "points","rebounds","assists","pra","points + rebounds + assists","3-pointers","3 pointers","3pt",
            "steals","blocks","turnovers","threes made","double double","triple double","free throws",
            # MLB
            "hits","runs","rbis","hr","home runs","total bases","strikeouts","pitching outs","outs recorded",
            "earned runs","walks","hits allowed","stolen bases",
            # NHL
            "shots on goal","sog","goals","assists","points","saves","power play points",
            # Soccer
            "shots","shots on target","goals","assists","goals + assists","passes","tackles",
            # Tennis
            "aces","double faults","games won","break points won","total games",
            # Golf
            "birdies","bogeys","score","strokes","to par",
            # MMA / Boxing
            "significant strikes","takedowns","control time","fight minutes","strikes absorbed",
            # Motorsports
            "finishing position","fastest lap"
          ]

          def looks_esport(row):
            # sport_id
            if COL_SID and pd.notna(row.get(COL_SID, None)):
              sid = str(row[COL_SID]).strip().upper()
              if sid in ESPORT_ID:
                return True
            # sport_name
            if COL_SNM and pd.notna(row.get(COL_SNM, None)):
              sn = str(row[COL_SNM]).lower()
              if any(k in sn for k in ESPORT_KEYS):
                return True
            # headers / stat fields
            hay = " ".join([
              str(row.get(COL_HDR,"")).lower(),
              str(row.get(COL_SUB,"")).lower(),
              str(row.get(COL_STAT,"")).lower()
            ])
            return any(k in hay for k in ESPORT_KEYS)

          def looks_traditional(row):
            # explicit positive signals
            if COL_SID and pd.notna(row.get(COL_SID, None)):
              if str(row[COL_SID]).strip().upper() in TRAD_ID:
                return True
            if COL_SNM and pd.notna(row.get(COL_SNM, None)):
              sn = str(row[COL_SNM]).lower()
              if any(k in sn for k in TRAD_KEYS):
                return True
            # If neither field is clear, fall back to markets
            stat = str(row.get(COL_STAT,"")).lower()
            if any(k in stat for k in KEEP_MARKETS):
              return True
            return False

          def market_ok(row):
            stat = str(row.get(COL_STAT,"")).lower()
            return any(k in stat for k in KEEP_MARKETS)

          def norm_player(row):
            name = str(row.get(COL_FULL,"")).strip() if COL_FULL else ""
            if name and name.lower()!="nan":
              return name
            return str(row.get(COL_HDR,"")).strip() if COL_HDR else ""

          if df.empty:
            out = df.iloc[0:0].copy()
          else:
            # Include if it looks traditional AND NOT esports
            keep_mask = df.apply(lambda r: looks_traditional(r) and not looks_esport(r), axis=1)
            kept = df[keep_mask].copy()
            out = kept[kept.apply(market_ok, axis=1)].copy()

          # shape standardized output
          if out.empty:
            out = pd.DataFrame(columns=[
              "player","sport_name","sport_id","market","line","side",
              "american_price","decimal_price","payout_multiplier",
              "selection_header","selection_subheader","updated_at"
            ])
          else:
            out["player"] = out.apply(norm_player, axis=1)
            out = out.assign(
              sport_name = out[COL_SNM] if COL_SNM in out.columns else "",
              sport_id   = out[COL_SID] if COL_SID in out.columns else "",
              market     = out[COL_STAT] if COL_STAT in out.columns else "",
              line       = out[COL_LINE] if COL_LINE in out.columns else "",
              side       = out[COL_SIDE] if COL_SIDE in out.columns else "",
              american_price = out[COL_AMER] if COL_AMER in out.columns else "",
              decimal_price  = out[COL_DEC] if COL_DEC in out.columns else "",
              payout_multiplier = out[COL_PAY] if COL_PAY in out.columns else "",
              selection_header  = out[COL_HDR] if COL_HDR in out.columns else "",
              selection_subheader = out[COL_SUB] if COL_SUB in out.columns else "",
              updated_at = out[COL_UPD] if COL_UPD in out.columns else ""
            )[[
              "player","sport_name","sport_id","market","line","side",
              "american_price","decimal_price","payout_multiplier",
              "selection_header","selection_subheader","updated_at"
            ]]

          out.to_csv("underdog_props_traditional.csv", index=False)

          # small preview into logs
          print(json.dumps(out.head(50).to_dict(orient="records"), ensure_ascii=False, indent=2))
          print("ROWS:", len(out))
          PY

      - name: Upload traditional-only CSV
        uses: actions/upload-artifact@v4
        with:
          name: underdog_props_traditional
          path: underdog_props_traditional.csv
